
Backend Implementation Checklist
================================

1. Update Lambda Handler Logic
------------------------------
[x] Modify `lambda/index.js` to parse and save:
    - email
    - bookTitle
    - loanerName
    - loanDate
[x] Wrap the DynamoDB call in try/catch for error handling

2. DynamoDB Table Considerations
-------------------------------
[ ] Confirm the table name used in Lambda (`process.env.TABLE_NAME`) matches your actual table
[ ] Ensure the primary key (e.g. userId, bookId) is sufficient for identifying each record
[ ] (Optional) Add a GSI if you plan to query/filter by email, loanerName, or loanDate

3. CDK (Infrastructure as Code)
-------------------------------
[ ] Check `lib/your-stack.ts` for the following:
    [ ] Lambda definition uses `.addEnvironment("TABLE_NAME", booksTable.tableName)`
    [ ] You include: `booksTable.grantWriteData(bookLambda)`
[ ] Deploy CDK changes after verifying configuration

4. IAM Permissions
------------------
[ ] Confirm the Lambda function has write (dynamodb:PutItem) access to the correct DynamoDB table

5. Environment Configuration
----------------------------
[ ] Ensure `TABLE_NAME` is properly set in the Lambdaâ€™s environment
[ ] If using multiple environments (dev/stage/prod), verify the value in each

6. Testing & Validation
-----------------------
[ ] Test the updated frontend form (React) to submit data
[ ] Check CloudWatch logs to verify that:
    [ ] Event body is parsed successfully
    [ ] All fields are present
    [ ] DynamoDB writes succeed
[ ] Confirm the data appears in DynamoDB as expected

7. (Optional Enhancements)
--------------------------
[ ] Add validation for required fields (e.g., return 400 error if any are missing)
[ ] Add timestamps (createdAt, updatedAt) to items
[ ] Add response details or identifiers in the success message
